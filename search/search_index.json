{
    "docs": [
        {
            "location": "/", 
            "text": "SchroederDocs\n\n\nJason Schroeder\n is a software developer who specializes in creating mobile apps using the \nCorona\n cross-platform 2D development framework. This site contains documentation on his Corona plugins and open-source code.\n\n\nCorona Plugins\n\n\n\n\nProgress Ring\n\n\nStripe\n\n\nTwitter\n\n\n\n\nOpen-Source Corona Libraries\n\n\n\n\ncorona-settings\n: a simple solution for securely saving persistent user settings in Corona projects\n\n\ncorona-timer2\n: extend the capabilities of Corona's built-in \ntimer\n library with one line of code\n\n\n\n\nLinks\n\n\n\n\nschroederapps.com\n\n\ngithub.com/schroederapps\n\n\ntwitter.com/schroederapps", 
            "title": "Home"
        }, 
        {
            "location": "/#schroederdocs", 
            "text": "Jason Schroeder  is a software developer who specializes in creating mobile apps using the  Corona  cross-platform 2D development framework. This site contains documentation on his Corona plugins and open-source code.", 
            "title": "SchroederDocs"
        }, 
        {
            "location": "/#corona-plugins", 
            "text": "Progress Ring  Stripe  Twitter", 
            "title": "Corona Plugins"
        }, 
        {
            "location": "/#open-source-corona-libraries", 
            "text": "corona-settings : a simple solution for securely saving persistent user settings in Corona projects  corona-timer2 : extend the capabilities of Corona's built-in  timer  library with one line of code", 
            "title": "Open-Source Corona Libraries"
        }, 
        {
            "location": "/#links", 
            "text": "schroederapps.com  github.com/schroederapps  twitter.com/schroederapps", 
            "title": "Links"
        }, 
        {
            "location": "/progress_ring/", 
            "text": "Progress Ring Plugin for Corona\n\n\n\n\nAbout the Plugin\n\n\nThe Progress Ring Plugin for Corona allows developers to add customizable circular \"progress rings\" to their Corona apps and games in as little as a single line of code. These rings can rotate to indicate a timer countdown, player/enemy health bars, or even be used in chart \n graph demonstrations in a business app. It was designed to be lightweight and flexible, with good performance even on older mobile devices.\n\n\n\n\nAdding the Plugin to your App\n\n\n\n\nActivate the plugin at the Corona Marketplace\n\n\nAdd an entry into the \nplugins\n table of your project's \nbuild.settings\n file. Below is an example of a minimal build.settings file with the required entry for the progressRing plugin:\n\n\n\n\nsettings = {}\n\nsettings.plugins = {\n  ['plugin.progressRing'] = {publisherId = 'com.schroederapps'},\n}\n\n\n\n\n\n\nCreating a Progress Ring\n\n\nTo create a \nprogressRing\n object, first \nrequire\n the plugin into your app/scene:\n\n\nlocal progressRing = require('plugin.progressRing')\n\n\n\n\nNext, call \nprogressRing.new()\n, which will return a progress ring object with the default parameters:\n\n\nlocal myRing = progressRing.new()\n\n\n\n\nNOTE:\n Progress rings are, at their core, just Corona \nGroupObjects\n. They can be rotated, repositioned, inserted into other group objects, and destroyed just like any other group object. Basically, if you can do it to a Corona group object, then you can do it to your progress ring.\n\n\n\n\nCustomizing Your Progress Ring\n\n\nCalling \nprogressRing.new()\n is the fastest way to add a progress ring to your app, but the returned object will always look the same, and may not suit your needs. But it's very easy to customize your ring by passing a table of parameters as an argument to \nprogressRing.new()\n. This table can include any of the following key/value pairs. None are required:\n\n\n\n\n\n\n\n\nkey\n\n\ntype\n\n\nvalue notes\n\n\n\n\n\n\n\n\n\n\nparent\n\n\nCorona display group\n\n\na variable name referencing a Corona display group to insert the ring into. Defaults to \ndisplay.currentStage\n.\n\n\n\n\n\n\nx\n\n\nnumber\n\n\nthe x coordinate where the ring should be placed. Defaults to \nnil\n (effectively \n0\n).\n\n\n\n\n\n\ny\n\n\nnumber\n\n\nthe y coordinate where the ring should be placed. Defaults to \nnil\n (effectively \n0\n).\n\n\n\n\n\n\nradius\n\n\nnumber\n\n\nthe radius of your ring in Corona content units. Defaults to \n100\n.\n\n\n\n\n\n\ndiameter\n\n\nnumber\n\n\nthe diameter of your ring in Corona content units. If both \nradius\n and \ndiameter\n are specified, \ndiameter\n is given priority. Defaults to \n200\n\n\n\n\n\n\nringDepth\n\n\nnumber\n\n\na number between 0 and 1 representing the depth of your ring. A ringDepth of \n1\n will result in a fully-round ring (\u201call donut, no hole\u201d), while a ringDepth of \n0\n would result in a practically invisible ring (\u201call hole, no donut\u201d). Defaults to \n.33\n.\n\n\n\n\n\n\nringColor\n\n\ntable\n\n\na table containing 4 numbers between 0 and 1, representing the RGBA values of your ring\u2019s bar color. Defaults to \n{1, .5, 0, 1}\n.\n\n\n\n\n\n\nbgColor\n\n\ntable\n\n\na table containing 4 numbers between 0 and 1, representing the RBGA values of your ring\u2019s background color. Defaults to \n{.7, .7, .7, 1}\n.\n\n\n\n\n\n\nstrokeColor\n\n\ntable\n\n\na table containing 4 numbers between 0 and 1, representing the RBGA values of your ring\u2019s stroke color. If not specified, this value will default to whatever your ring's \nbgColor\n is.\n\n\n\n\n\n\nstrokeWidth\n\n\nnumber\n\n\na number representing the width of your ring\u2019s stroke in Corona content units. Defaults to \n0\n.\n\n\n\n\n\n\ncounterclockwise\n\n\nboolean\n\n\nwhether or not the ring should advance in a counter-clockwise manner. Defaults to \nfalse\n.\n\n\n\n\n\n\nhideBG\n\n\nboolean\n\n\nwhether or not the background should be invisible. Defaults to \nfalse\n.\n\n\n\n\n\n\ntime\n\n\nnumber\n\n\nthe amount of time in milliseconds your ring will take to make a full 360-degree rotation. Defaults to \n10000\n (10 seconds).\n\n\n\n\n\n\nposition\n\n\nnumber\n\n\na number between 0 and 1 representing the starting position of your progress bar. \n0\n would result in no visible progress bar (i.e. 0 degrees), whereas \n1\n would result in a full progress bar (i.e. 360 degrees). Defaults to \n0\n.\n\n\n\n\n\n\nbottomImage\n\n\nstring\n\n\npath to an image file (i.e. \nimages/bottom.png\n) that will appear \u201cunderneath\u201d or \u201cbehind\u201d your progress ring. Automatically supports dynamic image scaling (@2x, @3x, etc.). Defaults to \nnil\n.\n\n\n\n\n\n\ntopImage\n\n\nstring\n\n\npath to an image file (i.e. \nimages/top.png\n) that will appear \u201con top of\u201d or \u201cin front of\u201d your progress ring. Automatically supports dynamic image scaling (@2x, @3x, etc.). Defaults to \nnil\n.\n\n\n\n\n\n\n\n\n\n\n\n\nObject Methods \n Properties\n\n\nCalling \nprogressRing.new()\n will create a progress ring object, but it's just going to sit there statically until you call one or more of the following methods on your created objects. Note that methods expect a reference to the ring object, so be sure to call them using a \n:\n colon operator, not a \n.\n dot, as indicated below.\n\n\n\n\nring:goTo(position, \n[time], [onComplete])\n\n\n\n\nAdvances or retreats the position of the progress ring to the position specified. Will cancel and override any currently-running \ngoTo\n call. Upon completion, a \nprogressRingEvent\n is fired with a phase of \ncompleted\n.\n\n\nAccepts the following arguments:\n\n\n\n\n\n\n\n\n\n\nkey\n\n\ntype\n\n\nvalue notes\n\n\n\n\n\n\n\n\n\n\nposition\n\n\nnumber\n\n\na number between 0 and 1 representing the position of the bar should advance or retreat to. \n0\n would result in no visible progress bar (i.e. 0 degrees), whereas \n1\n would result in a full progress bar (i.e. 360 degrees). \n(required)\n\n\n\n\n\n\ntime\n\n\nnumber\n\n\nthe number of milliseconds for the ring to advance or retreat to the specified position. If \nnil\n, the time is determined by the \ntime\n value specified for a full rotation when the ring was created. For example, if a ring has a \ntime\n value of \n10000\n for a full rotation, and you are moving the ring from position \n0\n to position \n.5\n, then it will take 5 seconds to advance by default. \n(optional)\n\n\n\n\n\n\nonComplete\n\n\nfunction\n\n\na function to call when the ring completes its advancement or retreat. A reference to the ring object will be passed as a single argument to the function. \n(optional)\n\n\n\n\n\n\n\n\nExample:\n\n\nlocal progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function onMovementComplete(target)\n  print('progress ring ' .. tostring(target) .. ' completed its rotation!')\nend\n\nmyRing:goTo(.9, 3000, onMovementComplete)\n\n\n\n\n\n\nring:pause()\n\n\n\n\nPauses a progress ring in motion. Accepts no arguments.\n\n\n\n\nExample:\n\n\nlocal progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function pauseThatRing()\n  myRing:pause()\nend\n\nmyRing:goTo(1) --start moving the ring (takes 10 seconds)\ntimer.performWithDelay(2000, pauseThatRing) --pause the ring after 2 seconds\n\n\n\n\n\n\nring:resume()\n\n\n\n\nResumes motion on a paused progress ring. Accepts no arguments.\n\n\n\n\nExample:\n\n\nlocal progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function pauseThatRing()\n  myRing:pause()\nend\n\nlocal function resumeThatRing()\n  myRing:resume()\nend\n\nmyRing:goTo(1) -- start moving the ring (takes 10 seconds)\ntimer.performWithDelay(2000, pauseThatRing) -- pause the ring after 2 seconds\ntimer.performWithDelay(4000, resumeThatRing) -- resume the motion 2 seconds later\n\n\n\n\n\n\nring:reset()\n\n\n\n\nReturns ring to the starting position defined when the object was created. Cancels any currently-running \ngoTo\n call. Accepts no arguments.\n\n\n\n\nExample:\n\n\nlocal progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function resetMe()\n  myRing:reset()\nend\n\nmyRing:goTo(1, 2000, resetMe) -- do a full 2-second rotation, then reset\n\n\n\n\n\n\nring.position\n\n\n\n\nA number between 0 and 1 indicating where the progress ring currently stands in its progression. Setting this value will cause the ring to instantly jump to that position.\n\n\n\n\nExample:\n\n\nlocal progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\n-- check ring's position:\nprint(myRing.position) -- \n 0\n\n-- set ring's position\nmyRing.position = .75 -- ring will visually jump to the .75 position\n\n\n\n\n\n\n\n\nAdding Event Listeners\n\n\nProgress Ring objects dispatch \nprogressRingEvents\n at key moments that can be listened for and acted on. The event table that is dispatched contains the following key/value pairs:\n\n\n\n\n\n\n\n\nkey\n\n\ntype\n\n\nvalue notes\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nwill always be \nprogressRingEvent\n\n\n\n\n\n\ntarget\n\n\nreference\n\n\na reference to the progress ring object that dispatched the event\n\n\n\n\n\n\nphase\n\n\nstring\n\n\nwill be one of the following: \ncompleted\n, \npaused\n, \nresumed\n, or \nreset\n\n\n\n\n\n\nposition\n\n\nnumber\n\n\na number between 0 and 1 indicating the ring's position when the event was dispatched.\n\n\n\n\n\n\ntime\n\n\nnumber\n\n\nthe time value that was passed to a completed \ngoTo\n call. Will always be \nnil\n when \nevent.phase ~= 'completed'\n.\n\n\n\n\n\n\n\n\nTo listen for these events, add an event listener to your ring object as such:\n\n\nlocal progressRing = require('plugin.progressRing')\n\nlocal function ringEventListener(event)\n  print('Ring event fired! Target: ' .. event.target .. '; Phase: ' .. event.phase)\nend\n\nlocal myRing = progressRing.new()\nmyRing:addEventListener('progressRingEvent', ringEventListener)\nmyRing:goTo(1)\n\n\n\n\n\n\n\n\nGotchas\n\n\nProgress ring objects utilize multiple masks to create the \"donut hole\" effect, and have perfectly round edges. Corona has a \nnested masking limit of three\n. Because of this, progress ring objects with a \nringDepth\n less than \n1\n cannot be inserted into masked groups, including \ndisplay.newContainer\n, \nwidget.newScrollView\n or \nwidget.newTableView\n objects.\n\n\nRings with a \nringDepth\n of \n1\n only use two nested masks because they don't have a 'hole' and can be inserted into masked groups, but only \"one deep.\"", 
            "title": "Progress Ring"
        }, 
        {
            "location": "/progress_ring/#progress-ring-plugin-for-corona", 
            "text": "", 
            "title": "Progress Ring Plugin for Corona"
        }, 
        {
            "location": "/progress_ring/#about-the-plugin", 
            "text": "The Progress Ring Plugin for Corona allows developers to add customizable circular \"progress rings\" to their Corona apps and games in as little as a single line of code. These rings can rotate to indicate a timer countdown, player/enemy health bars, or even be used in chart   graph demonstrations in a business app. It was designed to be lightweight and flexible, with good performance even on older mobile devices.", 
            "title": "About the Plugin"
        }, 
        {
            "location": "/progress_ring/#adding-the-plugin-to-your-app", 
            "text": "Activate the plugin at the Corona Marketplace  Add an entry into the  plugins  table of your project's  build.settings  file. Below is an example of a minimal build.settings file with the required entry for the progressRing plugin:   settings = {}\n\nsettings.plugins = {\n  ['plugin.progressRing'] = {publisherId = 'com.schroederapps'},\n}", 
            "title": "Adding the Plugin to your App"
        }, 
        {
            "location": "/progress_ring/#creating-a-progress-ring", 
            "text": "To create a  progressRing  object, first  require  the plugin into your app/scene:  local progressRing = require('plugin.progressRing')  Next, call  progressRing.new() , which will return a progress ring object with the default parameters:  local myRing = progressRing.new()  NOTE:  Progress rings are, at their core, just Corona  GroupObjects . They can be rotated, repositioned, inserted into other group objects, and destroyed just like any other group object. Basically, if you can do it to a Corona group object, then you can do it to your progress ring.", 
            "title": "Creating a Progress Ring"
        }, 
        {
            "location": "/progress_ring/#customizing-your-progress-ring", 
            "text": "Calling  progressRing.new()  is the fastest way to add a progress ring to your app, but the returned object will always look the same, and may not suit your needs. But it's very easy to customize your ring by passing a table of parameters as an argument to  progressRing.new() . This table can include any of the following key/value pairs. None are required:     key  type  value notes      parent  Corona display group  a variable name referencing a Corona display group to insert the ring into. Defaults to  display.currentStage .    x  number  the x coordinate where the ring should be placed. Defaults to  nil  (effectively  0 ).    y  number  the y coordinate where the ring should be placed. Defaults to  nil  (effectively  0 ).    radius  number  the radius of your ring in Corona content units. Defaults to  100 .    diameter  number  the diameter of your ring in Corona content units. If both  radius  and  diameter  are specified,  diameter  is given priority. Defaults to  200    ringDepth  number  a number between 0 and 1 representing the depth of your ring. A ringDepth of  1  will result in a fully-round ring (\u201call donut, no hole\u201d), while a ringDepth of  0  would result in a practically invisible ring (\u201call hole, no donut\u201d). Defaults to  .33 .    ringColor  table  a table containing 4 numbers between 0 and 1, representing the RGBA values of your ring\u2019s bar color. Defaults to  {1, .5, 0, 1} .    bgColor  table  a table containing 4 numbers between 0 and 1, representing the RBGA values of your ring\u2019s background color. Defaults to  {.7, .7, .7, 1} .    strokeColor  table  a table containing 4 numbers between 0 and 1, representing the RBGA values of your ring\u2019s stroke color. If not specified, this value will default to whatever your ring's  bgColor  is.    strokeWidth  number  a number representing the width of your ring\u2019s stroke in Corona content units. Defaults to  0 .    counterclockwise  boolean  whether or not the ring should advance in a counter-clockwise manner. Defaults to  false .    hideBG  boolean  whether or not the background should be invisible. Defaults to  false .    time  number  the amount of time in milliseconds your ring will take to make a full 360-degree rotation. Defaults to  10000  (10 seconds).    position  number  a number between 0 and 1 representing the starting position of your progress bar.  0  would result in no visible progress bar (i.e. 0 degrees), whereas  1  would result in a full progress bar (i.e. 360 degrees). Defaults to  0 .    bottomImage  string  path to an image file (i.e.  images/bottom.png ) that will appear \u201cunderneath\u201d or \u201cbehind\u201d your progress ring. Automatically supports dynamic image scaling (@2x, @3x, etc.). Defaults to  nil .    topImage  string  path to an image file (i.e.  images/top.png ) that will appear \u201con top of\u201d or \u201cin front of\u201d your progress ring. Automatically supports dynamic image scaling (@2x, @3x, etc.). Defaults to  nil .", 
            "title": "Customizing Your Progress Ring"
        }, 
        {
            "location": "/progress_ring/#object-methods-properties", 
            "text": "Calling  progressRing.new()  will create a progress ring object, but it's just going to sit there statically until you call one or more of the following methods on your created objects. Note that methods expect a reference to the ring object, so be sure to call them using a  :  colon operator, not a  .  dot, as indicated below.", 
            "title": "Object Methods &amp; Properties"
        }, 
        {
            "location": "/progress_ring/#ringgotoposition-time-oncomplete", 
            "text": "Advances or retreats the position of the progress ring to the position specified. Will cancel and override any currently-running  goTo  call. Upon completion, a  progressRingEvent  is fired with a phase of  completed .  Accepts the following arguments:      key  type  value notes      position  number  a number between 0 and 1 representing the position of the bar should advance or retreat to.  0  would result in no visible progress bar (i.e. 0 degrees), whereas  1  would result in a full progress bar (i.e. 360 degrees).  (required)    time  number  the number of milliseconds for the ring to advance or retreat to the specified position. If  nil , the time is determined by the  time  value specified for a full rotation when the ring was created. For example, if a ring has a  time  value of  10000  for a full rotation, and you are moving the ring from position  0  to position  .5 , then it will take 5 seconds to advance by default.  (optional)    onComplete  function  a function to call when the ring completes its advancement or retreat. A reference to the ring object will be passed as a single argument to the function.  (optional)     Example:  local progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function onMovementComplete(target)\n  print('progress ring ' .. tostring(target) .. ' completed its rotation!')\nend\n\nmyRing:goTo(.9, 3000, onMovementComplete)", 
            "title": "ring:goTo(position, [time], [onComplete])"
        }, 
        {
            "location": "/progress_ring/#ringpause", 
            "text": "Pauses a progress ring in motion. Accepts no arguments.   Example:  local progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function pauseThatRing()\n  myRing:pause()\nend\n\nmyRing:goTo(1) --start moving the ring (takes 10 seconds)\ntimer.performWithDelay(2000, pauseThatRing) --pause the ring after 2 seconds", 
            "title": "ring:pause()"
        }, 
        {
            "location": "/progress_ring/#ringresume", 
            "text": "Resumes motion on a paused progress ring. Accepts no arguments.   Example:  local progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function pauseThatRing()\n  myRing:pause()\nend\n\nlocal function resumeThatRing()\n  myRing:resume()\nend\n\nmyRing:goTo(1) -- start moving the ring (takes 10 seconds)\ntimer.performWithDelay(2000, pauseThatRing) -- pause the ring after 2 seconds\ntimer.performWithDelay(4000, resumeThatRing) -- resume the motion 2 seconds later", 
            "title": "ring:resume()"
        }, 
        {
            "location": "/progress_ring/#ringreset", 
            "text": "Returns ring to the starting position defined when the object was created. Cancels any currently-running  goTo  call. Accepts no arguments.   Example:  local progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\nlocal function resetMe()\n  myRing:reset()\nend\n\nmyRing:goTo(1, 2000, resetMe) -- do a full 2-second rotation, then reset", 
            "title": "ring:reset()"
        }, 
        {
            "location": "/progress_ring/#ringposition", 
            "text": "A number between 0 and 1 indicating where the progress ring currently stands in its progression. Setting this value will cause the ring to instantly jump to that position.   Example:  local progressRing = require('plugin.progressRing')\nlocal myRing = progressRing.new()\n\n-- check ring's position:\nprint(myRing.position) --   0\n\n-- set ring's position\nmyRing.position = .75 -- ring will visually jump to the .75 position", 
            "title": "ring.position"
        }, 
        {
            "location": "/progress_ring/#adding-event-listeners", 
            "text": "Progress Ring objects dispatch  progressRingEvents  at key moments that can be listened for and acted on. The event table that is dispatched contains the following key/value pairs:     key  type  value notes      name  string  will always be  progressRingEvent    target  reference  a reference to the progress ring object that dispatched the event    phase  string  will be one of the following:  completed ,  paused ,  resumed , or  reset    position  number  a number between 0 and 1 indicating the ring's position when the event was dispatched.    time  number  the time value that was passed to a completed  goTo  call. Will always be  nil  when  event.phase ~= 'completed' .     To listen for these events, add an event listener to your ring object as such:  local progressRing = require('plugin.progressRing')\n\nlocal function ringEventListener(event)\n  print('Ring event fired! Target: ' .. event.target .. '; Phase: ' .. event.phase)\nend\n\nlocal myRing = progressRing.new()\nmyRing:addEventListener('progressRingEvent', ringEventListener)\nmyRing:goTo(1)", 
            "title": "Adding Event Listeners"
        }, 
        {
            "location": "/progress_ring/#gotchas", 
            "text": "Progress ring objects utilize multiple masks to create the \"donut hole\" effect, and have perfectly round edges. Corona has a  nested masking limit of three . Because of this, progress ring objects with a  ringDepth  less than  1  cannot be inserted into masked groups, including  display.newContainer ,  widget.newScrollView  or  widget.newTableView  objects.  Rings with a  ringDepth  of  1  only use two nested masks because they don't have a 'hole' and can be inserted into masked groups, but only \"one deep.\"", 
            "title": "Gotchas"
        }, 
        {
            "location": "/stripe/", 
            "text": "Stripe Plugin for Corona\n\n\n\n\nDocumentation coming soon!\n\n\nFor now, please visit the older docs at \nschroederapps.com", 
            "title": "Stripe"
        }, 
        {
            "location": "/stripe/#stripe-plugin-for-corona", 
            "text": "", 
            "title": "Stripe Plugin for Corona"
        }, 
        {
            "location": "/stripe/#documentation-coming-soon", 
            "text": "For now, please visit the older docs at  schroederapps.com", 
            "title": "Documentation coming soon!"
        }, 
        {
            "location": "/twitter/", 
            "text": "Twitter Plugin for Corona\n\n\n\n\nDocumentation coming soon!\n\n\nFor now, please visit the older docs at \nschroederapps.com", 
            "title": "Twitter"
        }, 
        {
            "location": "/twitter/#twitter-plugin-for-corona", 
            "text": "", 
            "title": "Twitter Plugin for Corona"
        }, 
        {
            "location": "/twitter/#documentation-coming-soon", 
            "text": "For now, please visit the older docs at  schroederapps.com", 
            "title": "Documentation coming soon!"
        }
    ]
}